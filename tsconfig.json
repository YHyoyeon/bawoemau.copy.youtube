{
  "compilerOptions": {
    /* https://aka.ms/tsconfig에서 이 파일에 대해 더 읽어보세요 */

    /* Projects */
    // "incremental": true,                              /* 프로젝트의 점진적 컴파일을 허용하기 위해 .tsbuildinfo 파일 저장. */
    // "composite": true,                                /* TypeScript 프로젝트를 프로젝트 참조와 함께 사용할 수 있도록 제약 조건 활성화. */
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* 점진적 컴파일 파일에 대한 경로 지정. */
    // "disableSourceOfProjectReferenceRedirect": true,  /* 복합 프로젝트를 참조할 때 선언 파일 대신 소스 파일을 선호하지 않도록 설정. */
    // "disableSolutionSearching": true,                 /* 편집 시 다중 프로젝트 참조 확인을 하지 않도록 프로젝트 제외. */
    // "disableReferencedProjectLoad": true,             /* TypeScript에서 자동으로 로드되는 프로젝트 수 줄이기. */

    /* Language and Environment */
    "target": "es2016",                                  /* 생성된 JavaScript의 JavaScript 언어 버전 설정 및 호환 가능한 라이브러리 선언 포함. */
    // "lib": [],                                        /* 대상 런타임 환경을 설명하는 번들 라이브러리 선언 파일 집합 지정. */
    // "jsx": "preserve",                                /* 생성된 JSX 코드를 지정합니다. */
    // "experimentalDecorators": true,                   /* 레거시 실험적 데코레이터에 대한 실험적 지원을 활성화합니다. */
    // "emitDecoratorMetadata": true,                    /* 소스 파일에서 데코레이터 선언에 대한 디자인 타입 메타데이터를 내보냅니다. */
    // "jsxFactory": "",                                 /* React JSX emit을 대상으로 할 때 사용하는 JSX 팩토리 함수를 지정합니다. 예: 'React.createElement' 또는 'h'. */
    // "jsxFragmentFactory": "",                         /* React JSX emit을 대상으로 할 때 프래그먼트에 대해 사용하는 JSX 프래그먼트 참조를 지정합니다. 예: 'React.Fragment' 또는 'Fragment'. */
    // "jsxImportSource": "",                            /* 'jsx: react-jsx*'를 사용할 때 JSX 팩토리 함수를 가져오기 위해 사용하는 모듈 지정자를 지정합니다. */
    // "reactNamespace": "",                             /* 'createElement'에 대해 호출되는 객체를 지정합니다. 이는 'react' JSX emit을 대상으로 할 때만 적용됩니다. */
    // "noLib": true,                                    /* 기본 lib.d.ts를 포함한 모든 라이브러리 파일을 포함하지 않도록 설정합니다. */
    // "useDefineForClassFields": true,                  /* ECMAScript 표준을 준수하는 클래스 필드를 내보냅니다. */
    // "moduleDetection": "auto",                        /* 모듈 형식 JS 파일을 감지하는 방법을 제어합니다. */

    /* Modules */
    "module": "commonjs",                                /* 생성된 모듈 코드를 지정합니다. */
    // "rootDir": "./",                                  /* 소스 파일 내의 루트 폴더를 지정합니다. */
    // "moduleResolution": "node10",                     /* TypeScript가 주어진 모듈 지정자로부터 파일을 찾는 방법을 지정합니다. */
    // "baseUrl": "./",                                  /* 비상대적 모듈 이름을 해결하기 위한 기본 디렉토리를 지정합니다. */
    // "paths": {},                                      /* 가져오기를 추가 조회 위치로 다시 매핑하는 항목 집합을 지정합니다. */
    // "rootDirs": [],                                   /* 모듈을 해결할 때 여러 폴더를 하나로 취급할 수 있도록 허용합니다. */
    // "typeRoots": [],                                  /* './node_modules/@types'처럼 작동하는 여러 폴더를 지정합니다. */
    // "types": [],                                      /* 소스 파일에서 참조되지 않고 포함될 타입 패키지 이름을 지정합니다. */
    // "allowUmdGlobalAccess": true,                     /* 모듈에서 UMD 글로벌에 접근할 수 있도록 허용합니다. */
    // "moduleSuffixes": [],                             /* 모듈을 해결할 때 검색할 파일 이름 접미사 목록을 지정합니다. */
    // "allowImportingTsExtensions": true,               /* TypeScript 파일 확장자를 포함한 가져오기를 허용합니다. '--moduleResolution bundler'와 '--noEmit' 또는 '--emitDeclarationOnly'가 설정되어야 합니다. */
    // "resolvePackageJsonExports": true,                /* 패키지 가져오기를 해결할 때 package.json 'exports' 필드를 사용합니다. */
    // "resolvePackageJsonImports": true,                /* 가져오기를 해결할 때 package.json 'imports' 필드를 사용합니다. */
    // "customConditions": [],                           /* 가져오기를 해결할 때 기본 해석기 별 기본값에 추가할 조건을 설정합니다. */
    // "resolveJsonModule": true,                        /* .json 파일 가져오기를 활성화합니다. */
    // "allowArbitraryExtensions": true,                 /* 선언 파일이 있는 경우 모든 확장자를 가진 파일 가져오기를 활성화합니다. */
    // "noResolve": true,                                /* 가져오기, require 또는 <reference>가 프로젝트에 추가될 파일 수를 확장하지 않도록 합니다. */

    /* JavaScript Support */
    // "allowJs": true,                                  /* JavaScript 파일이 프로그램의 일부가 되도록 허용합니다. 'checkJS' 옵션을 사용하여 이러한 파일에서 오류를 가져옵니다. */
    // "checkJs": true,                                  /* 타입 검사된 JavaScript 파일에서 오류 보고를 활성화합니다. */
    // "maxNodeModuleJsDepth": 1,                        /* 'node_modules'에서 JavaScript 파일을 검사할 때 사용되는 최대 폴더 깊이를 지정합니다. 'allowJs'에만 적용됩니다. */

    /* Emit */
    // "declaration": true,                              /* 프로젝트의 TypeScript 및 JavaScript 파일에서 .d.ts 파일을 생성합니다. */
    // "declarationMap": true,                           /* d.ts 파일에 대한 소스맵을 생성합니다. */
    // "emitDeclarationOnly": true,                      /* JavaScript 파일이 아닌 d.ts 파일만 출력합니다. */
    // "sourceMap": true,                                /* 생성된 JavaScript 파일에 대한 소스맵 파일을 생성합니다. */
    // "inlineSourceMap": true,                          /* 생성된 JavaScript 내에 소스맵 파일을 포함합니다. */
    // "outFile": "./",                                  /* 모든 출력을 하나의 JavaScript 파일로 번들링하는 파일을 지정합니다. 'declaration'이 true인 경우, 모든 .d.ts 출력을 번들링하는 파일도 지정합니다. */
    // "outDir": "./",                                   /* 생성된 파일에 대한 출력 폴더를 지정합니다. */
    // "removeComments": true,                           /* 주석을 제거하고 출력합니다. */
    // "noEmit": true,                                   /* 컴파일에서 파일을 생성하지 않도록 설정합니다. */
    // "importHelpers": true,                            /* 파일당 포함 대신 프로젝트당 한 번씩 tslib에서 헬퍼 함수를 가져오도록 허용합니다. */
    // "importsNotUsedAsValues": "remove",               /* 타입으로만 사용되는 가져오기에 대한 emit/검사 동작을 지정합니다. */
    // "downlevelIteration": true,                       /* 반복을 위한 더 준수하지만, 장황하고 덜 성능이 좋은 JavaScript를 생성합니다. */
    // "sourceRoot": "",                                 /* 디버거가 참조 소스 코드를 찾을 수 있는 루트 경로를 지정합니다. */
    // "mapRoot": "",                                    /* 디버거가 생성된 위치 대신 맵 파일을 찾을 위치를 지정합니다. */
    // "inlineSources": true,                            /* 생성된 JavaScript 내에 소스 코드를 포함합니다. */
    // "emitBOM": true,                                  /* 출력 파일의 시작 부분에 UTF-8 바이트 순서 표시(BOM)를 생성합니다. */
    // "newLine": "crlf",                                /* 파일을 생성할 때 개행 문자를 설정합니다. */
    // "stripInternal": true,                            /* JSDoc 주석에 '@internal'이 있는 선언을 생성하지 않도록 설정합니다. */
    // "noEmitHelpers": true,                            /* 생성된 출력에서 '__extends'와 같은 사용자 정의 헬퍼 함수를 생성하지 않도록 설정합니다. */
    // "noEmitOnError": true,                            /* 타입 검사 오류가 보고된 경우 파일을 생성하지 않도록 설정합니다. */
    // "preserveConstEnums": true,                       /* 생성된 코드에서 'const enum' 선언을 지우지 않도록 설정합니다. */
    // "declarationDir": "./",                           /* 생성된 선언 파일에 대한 출력 디렉토리를 지정합니다. */
    // "preserveValueImports": true,                     /* JavaScript 출력에서 제거될 수 있는 미사용 값 가져오기를 유지합니다. */

    /* Interop Constraints */
    // "isolatedModules": true,                          /* 다른 가져오기에 의존하지 않고 각 파일을 안전하게 트랜스파일할 수 있도록 합니다. */
    // "verbatimModuleSyntax": true,                     /* 타입 전용으로 표시되지 않은 모든 가져오기 또는 내보내기를 변환하거나 생략하지 않고, 'module' 설정에 기반하여 출력 파일 형식에 맞게 작성되도록 합니다. */
    // "allowSyntheticDefaultImports": true,             /* 모듈에 기본 내보내기가 없을 때 'import x from y'를 허용합니다. */
    "esModuleInterop": true,                             /* CommonJS 모듈을 가져올 때의 호환성을 지원하기 위해 추가적인 JavaScript를 생성합니다. 이는 타입 호환성을 위해 'allowSyntheticDefaultImports'를 활성화합니다. */
    // "preserveSymlinks": true,                         /* 심볼릭 링크를 실제 경로로 해석하지 않도록 설정합니다. 이는 node의 동일한 플래그와 상관됩니다. */
    "forceConsistentCasingInFileNames": true,            /* 가져오기에서 대소문자가 일치하도록 합니다. */

    /* Type Checking */
    "strict": true,                                      /* 모든 엄격한 타입 검사 옵션을 활성화합니다. */
    "noImplicitAny": true,                               /* 암시적인 'any' 타입이 있는 표현식 및 선언에 대해 오류 보고를 활성화합니다. */
    "strictNullChecks": true,                            /* 타입 검사 시 'null' 및 'undefined'를 고려합니다. */
    "strictFunctionTypes": true,                         /* 함수를 할당할 때, 매개변수와 반환 값이 하위 타입 호환성을 갖도록 확인합니다. */
    "strictBindCallApply": true,                         /* 'bind', 'call', 및 'apply' 메서드의 인수가 원래 함수와 일치하는지 확인합니다. */
    "strictPropertyInitialization": true,                /* 생성자에서 설정되지 않은 클래스 속성에 대해 확인합니다. */
    "noImplicitThis": true,                              /* 'this'가 'any' 타입으로 주어졌을 때 오류 보고를 활성화합니다. */
    "useUnknownInCatchVariables": true,                  /* 기본 catch 절 변수들을 'any' 대신 'unknown'으로 설정합니다. */
    "alwaysStrict": true,                                /* 항상 'use strict'를 생성하도록 합니다. */
    "noUnusedLocals": true,                              /* 읽히지 않은 로컬 변수에 대해 오류 보고를 활성화합니다. */
    "noUnusedParameters": true,                          /* 읽히지 않은 함수 매개변수에 대해 오류를 발생시킵니다. */
    "exactOptionalPropertyTypes": true,                  /* 선택적 속성 타입을 작성된 대로 해석하고 'undefined'를 추가하지 않습니다. */
    "noImplicitReturns": true,                           /* 함수에서 명시적으로 반환되지 않는 코드 경로에 대해 오류 보고를 활성화합니다. */
    "noFallthroughCasesInSwitch": true,                  /* switch 문에서 case가 떨어지는 경우 오류 보고를 활성화합니다. */
    "noUncheckedIndexedAccess": true,                    /* 인덱스를 사용하여 접근할 때 타입에 'undefined'를 추가합니다. */
    "noImplicitOverride": true,                          /* 파생 클래스에서 재정의되는 멤버가 'override' 수정자로 표시되도록 합니다. */
    "noPropertyAccessFromIndexSignature": true,          /* 인덱스 타입을 사용하여 선언된 키에 대해 인덱스 접근자를 사용하도록 강제합니다. */
    "allowUnusedLabels": false,                          /* 사용되지 않는 레이블에 대해 오류 보고를 활성화합니다. */
    "allowUnreachableCode": false,                       /* 도달할 수 없는 코드에 대해 오류 보고를 활성화합니다. */

    /* Completeness */
    "skipLibCheck": true                                 /* 모든 .d.ts 파일에 대한 타입 검사를 건너뜁니다. */
  }
}
